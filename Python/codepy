ef contracting(l):
	x=0
	diff1=abs(l[x]-l[x+1])
	for i in range(1,len(l)-1):
		diff2=abs(l[i]-l[i+1])
		if(diff2<diff1):
			diff1=diff2
		else:
			return False
	return True
			
		
		
def leftrotate(m):
	n=len(m[0])
	for i in range(0,n//2):
		for j in range(i,n-i-1):
			temp=m[i][j]
			m[i][j]=m[j][n-1-i]
			m[j][n-1-i]=m[n-1-i][n-1-j]
			m[n-1-i][n-1-j]=m[n-1-j][i]
			m[n-1-j][i]=temp
	return m 
  
  
def counthv(l):
	count=0
	count1=0
	m=[]
	n=[]
	for i in range(1,len(l)-1):
		if l[i]>l[i-1] and l[i]>l[i+1]:
			count=count+1
	for i in range(1,len(l)-1):
			if l[i]<l[i-1] and l[i]<l[i+1]:
				count1=count1+1
	n.append(count1)
	m.append(count)
	return m+n
    